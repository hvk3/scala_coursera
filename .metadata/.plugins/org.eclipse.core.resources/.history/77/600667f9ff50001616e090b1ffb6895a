package week3

class Rational(x: Int, y: Int) {
	require(y != 0, "Denominator cannot be zero")
	private def gcd(a: Int, b: Int): Int =
		if (b == 0) a
		else gcd(b, a % b)

	def numer = x
	def denom = y

	def <(that: Rational) = numer * that.denom < denom * that.numer

	def max(that: Rational) = if (this < that) that else this

	def +(that: Rational) = {
		new Rational(numer * that.denom + denom * that.numer, denom * that.denom)
	}

	def -(that: Rational) = this + -that

	def unary_- =
		new Rational(-x, y)

	override def toString = {
		val g = gcd(x, y)
		numer / g + "/" + denom / g
	}
}